#!/usr/bin/env node

/**
 * Build script to inject the correct asset filenames into the worker
 * Reads dist/index.html and generates a TypeScript file with the HTML content
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DIST_INDEX_PATH = path.join(__dirname, '../dist/index.html');
const OUTPUT_PATH = path.join(__dirname, '../src/worker-voice/generated-index.ts');

try {
  console.log('üì¶ Injecting assets into worker...');

  // Check if dist/index.html exists
  if (!fs.existsSync(DIST_INDEX_PATH)) {
    console.error('‚ùå Error: dist/index.html not found. Run vite build first.');
    process.exit(1);
  }

  // Read the built index.html
  const indexHtml = fs.readFileSync(DIST_INDEX_PATH, 'utf-8');

  // Validate that it contains the expected structure
  if (!indexHtml.includes('<div id="root">') || !indexHtml.includes('/assets/')) {
    console.error('‚ùå Error: dist/index.html appears to be malformed');
    process.exit(1);
  }

  // Extract asset filenames for logging
  const jsMatch = indexHtml.match(/\/assets\/(index-[^"']+\.js)/);
  const cssMatch = indexHtml.match(/\/assets\/(index-[^"']+\.css)/);

  if (jsMatch && cssMatch) {
    console.log(`‚úÖ Found assets: ${jsMatch[1]}, ${cssMatch[1]}`);
  }

  // Generate the TypeScript file with the HTML content
  const tsContent = `// Auto-generated file - DO NOT EDIT
// Generated by scripts/inject-assets.js during build

export const indexHtml = ${JSON.stringify(indexHtml)};
`;

  // Write the generated file
  fs.writeFileSync(OUTPUT_PATH, tsContent, 'utf-8');

  console.log(`‚úÖ Generated ${path.relative(process.cwd(), OUTPUT_PATH)}`);
  console.log('‚úÖ Asset injection complete!');

} catch (error) {
  console.error('‚ùå Error during asset injection:', error.message);
  process.exit(1);
}
